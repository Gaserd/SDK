/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LPInterface extends utils.Interface {
  contractName: "LP";
  functions: {
    "addLiquidity(uint128)": FunctionFragment;
    "addReserve(uint128,uint128,uint48)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "azuroBet()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bet(uint256,uint128,uint64,uint64,uint64)": FunctionFragment;
    "changeAzuroBet(address)": FunctionFragment;
    "changeCore(address)": FunctionFragment;
    "changeDaoReward(uint128)": FunctionFragment;
    "changeMinDepo(uint128)": FunctionFragment;
    "changeOracleReward(uint128)": FunctionFragment;
    "changeWithdrawTimeout(uint64)": FunctionFragment;
    "claimDaoReward()": FunctionFragment;
    "core()": FunctionFragment;
    "daoFee()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getFeeMultiplier()": FunctionFragment;
    "getLeaf()": FunctionFragment;
    "getLeavesAmount(uint48,uint48,uint48,uint48,uint48)": FunctionFragment;
    "getOracleFee()": FunctionFragment;
    "getParent(uint48)": FunctionFragment;
    "getPossibilityOfReinforcement(uint128)": FunctionFragment;
    "getReserve()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lockReserve(uint128)": FunctionFragment;
    "lockedLiquidity()": FunctionFragment;
    "minDepo()": FunctionFragment;
    "multiplier()": FunctionFragment;
    "name()": FunctionFragment;
    "nextNode()": FunctionFragment;
    "nodeWithdrawView(uint48)": FunctionFragment;
    "oracleFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "reinforcementAbility()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sendOracleReward(address,uint128)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalDaoRewards()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treeNode(uint48)": FunctionFragment;
    "updateId()": FunctionFragment;
    "viewPayout(uint256)": FunctionFragment;
    "withdrawLiquidity(uint48,uint40)": FunctionFragment;
    "withdrawPayout(uint256)": FunctionFragment;
    "withdrawTimeout()": FunctionFragment;
    "withdrawals(uint48)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReserve",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "azuroBet", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bet",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAzuroBet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "changeCore", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeDaoReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinDepo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOracleReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWithdrawTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDaoReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "daoFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLeaf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLeavesAmount",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPossibilityOfReinforcement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockReserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minDepo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nodeWithdrawView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracleFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reinforcementAbility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOracleReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDaoRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treeNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "viewPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "azuroBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAzuroBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDaoReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinDepo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOracleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWithdrawTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDaoReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLeaf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLeavesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPossibilityOfReinforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minDepo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeWithdrawView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracleFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinforcementAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendOracleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDaoRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treeNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AzuroBetChanged(address)": EventFragment;
    "BetterWin(address,uint256,uint256)": EventFragment;
    "DaoRewardChanged(uint128)": EventFragment;
    "LiquidityAdded(address,uint256,uint48)": EventFragment;
    "LiquidityRemoved(address,uint256)": EventFragment;
    "LiquidityRequested(address,uint256)": EventFragment;
    "MinDepoChanged(uint128)": EventFragment;
    "NewBet(address,uint256,uint256,uint64,uint128,uint256,uint128,uint128)": EventFragment;
    "OracleRewardChanged(uint128)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PeriodChanged(uint64)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "WithdrawTimeoutChanged(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AzuroBetChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetterWin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoRewardChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinDepoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRewardChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawTimeoutChanged"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type AzuroBetChangedEvent = TypedEvent<
  [string],
  { newAzuroBet: string }
>;

export type AzuroBetChangedEventFilter = TypedEventFilter<AzuroBetChangedEvent>;

export type BetterWinEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { better: string; tokenId: BigNumber; amount: BigNumber }
>;

export type BetterWinEventFilter = TypedEventFilter<BetterWinEvent>;

export type DaoRewardChangedEvent = TypedEvent<
  [BigNumber],
  { newDaoFee: BigNumber }
>;

export type DaoRewardChangedEventFilter =
  TypedEventFilter<DaoRewardChangedEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [string, BigNumber, number],
  { account: string; amount: BigNumber; leaf: number }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export type LiquidityRequestedEvent = TypedEvent<
  [string, BigNumber],
  { requestWallet: string; requestedValueLp: BigNumber }
>;

export type LiquidityRequestedEventFilter =
  TypedEventFilter<LiquidityRequestedEvent>;

export type MinDepoChangedEvent = TypedEvent<
  [BigNumber],
  { newMinDepo: BigNumber }
>;

export type MinDepoChangedEventFilter = TypedEventFilter<MinDepoChangedEvent>;

export type NewBetEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    owner: string;
    betId: BigNumber;
    conditionId: BigNumber;
    outcomeId: BigNumber;
    amount: BigNumber;
    odds: BigNumber;
    fund1: BigNumber;
    fund2: BigNumber;
  }
>;

export type NewBetEventFilter = TypedEventFilter<NewBetEvent>;

export type OracleRewardChangedEvent = TypedEvent<
  [BigNumber],
  { newOracleFee: BigNumber }
>;

export type OracleRewardChangedEventFilter =
  TypedEventFilter<OracleRewardChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PeriodChangedEvent = TypedEvent<
  [BigNumber],
  { newPeriod: BigNumber }
>;

export type PeriodChangedEventFilter = TypedEventFilter<PeriodChangedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawTimeoutChangedEvent = TypedEvent<
  [BigNumber],
  { newWithdrawTimeout: BigNumber }
>;

export type WithdrawTimeoutChangedEventFilter =
  TypedEventFilter<WithdrawTimeoutChangedEvent>;

export interface LP extends BaseContract {
  contractName: "LP";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      leaf: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    azuroBet(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bet(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcomeId: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAzuroBet(
      newAzuroBet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeCore(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDaoReward(
      newDaoFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinDepo(
      newMinDepo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOracleReward(
      newOracleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeWithdrawTimeout(
      newWithdrawTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimDaoReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    daoFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeMultiplier: BigNumber }>;

    getLeaf(overrides?: CallOverrides): Promise<[number] & { leaf: number }>;

    getLeavesAmount(
      node: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      l: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getOracleFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    getParent(
      fromNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { parentNumber: number }>;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    getReserve(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserve: BigNumber }>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockReserve(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepo(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextNode(overrides?: CallOverrides): Promise<[number]>;

    nodeWithdrawView(
      leaf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawAmount: BigNumber }>;

    oracleFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reinforcementAbility(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendOracleReward(
      oracle: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalDaoRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treeNode(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { updateId: BigNumber; amount: BigNumber }
    >;

    updateId(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    withdrawLiquidity(
      depNum: BigNumberish,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTimeout(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addLiquidity(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReserve(
    initReserve: BigNumberish,
    profitReserve: BigNumberish,
    leaf: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  azuroBet(overrides?: CallOverrides): Promise<string>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  bet(
    conditionId: BigNumberish,
    amount: BigNumberish,
    outcomeId: BigNumberish,
    deadline: BigNumberish,
    minOdds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAzuroBet(
    newAzuroBet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeCore(
    newCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDaoReward(
    newDaoFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinDepo(
    newMinDepo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOracleReward(
    newOracleFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeWithdrawTimeout(
    newWithdrawTimeout: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimDaoReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  daoFee(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  getLeaf(overrides?: CallOverrides): Promise<number>;

  getLeavesAmount(
    node: BigNumberish,
    begin: BigNumberish,
    end: BigNumberish,
    l: BigNumberish,
    r: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleFee(overrides?: CallOverrides): Promise<BigNumber>;

  getParent(
    fromNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getPossibilityOfReinforcement(
    reinforcementAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserve(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    token_: string,
    azuroBetAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockReserve(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  minDepo(overrides?: CallOverrides): Promise<BigNumber>;

  multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextNode(overrides?: CallOverrides): Promise<number>;

  nodeWithdrawView(
    leaf: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  reinforcementAbility(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendOracleReward(
    oracle: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalDaoRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treeNode(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { updateId: BigNumber; amount: BigNumber }
  >;

  updateId(overrides?: CallOverrides): Promise<BigNumber>;

  viewPayout(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  withdrawLiquidity(
    depNum: BigNumberish,
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPayout(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      leaf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    azuroBet(overrides?: CallOverrides): Promise<string>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcomeId: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAzuroBet(
      newAzuroBet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCore(newCore: string, overrides?: CallOverrides): Promise<void>;

    changeDaoReward(
      newDaoFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinDepo(
      newMinDepo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOracleReward(
      newOracleFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeWithdrawTimeout(
      newWithdrawTimeout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimDaoReward(overrides?: CallOverrides): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    daoFee(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getLeaf(overrides?: CallOverrides): Promise<number>;

    getLeavesAmount(
      node: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      l: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    getParent(
      fromNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockReserve(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    minDepo(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextNode(overrides?: CallOverrides): Promise<number>;

    nodeWithdrawView(
      leaf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    reinforcementAbility(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOracleReward(
      oracle: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalDaoRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treeNode(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { updateId: BigNumber; amount: BigNumber }
    >;

    updateId(overrides?: CallOverrides): Promise<BigNumber>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    withdrawLiquidity(
      depNum: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "AzuroBetChanged(address)"(newAzuroBet?: null): AzuroBetChangedEventFilter;
    AzuroBetChanged(newAzuroBet?: null): AzuroBetChangedEventFilter;

    "BetterWin(address,uint256,uint256)"(
      better?: string | null,
      tokenId?: null,
      amount?: null
    ): BetterWinEventFilter;
    BetterWin(
      better?: string | null,
      tokenId?: null,
      amount?: null
    ): BetterWinEventFilter;

    "DaoRewardChanged(uint128)"(newDaoFee?: null): DaoRewardChangedEventFilter;
    DaoRewardChanged(newDaoFee?: null): DaoRewardChangedEventFilter;

    "LiquidityAdded(address,uint256,uint48)"(
      account?: string | null,
      amount?: null,
      leaf?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      account?: string | null,
      amount?: null,
      leaf?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,uint256)"(
      account?: string | null,
      amount?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      account?: string | null,
      amount?: null
    ): LiquidityRemovedEventFilter;

    "LiquidityRequested(address,uint256)"(
      requestWallet?: string | null,
      requestedValueLp?: null
    ): LiquidityRequestedEventFilter;
    LiquidityRequested(
      requestWallet?: string | null,
      requestedValueLp?: null
    ): LiquidityRequestedEventFilter;

    "MinDepoChanged(uint128)"(newMinDepo?: null): MinDepoChangedEventFilter;
    MinDepoChanged(newMinDepo?: null): MinDepoChangedEventFilter;

    "NewBet(address,uint256,uint256,uint64,uint128,uint256,uint128,uint128)"(
      owner?: string | null,
      betId?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      outcomeId?: null,
      amount?: null,
      odds?: null,
      fund1?: null,
      fund2?: null
    ): NewBetEventFilter;
    NewBet(
      owner?: string | null,
      betId?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      outcomeId?: null,
      amount?: null,
      odds?: null,
      fund1?: null,
      fund2?: null
    ): NewBetEventFilter;

    "OracleRewardChanged(uint128)"(
      newOracleFee?: null
    ): OracleRewardChangedEventFilter;
    OracleRewardChanged(newOracleFee?: null): OracleRewardChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PeriodChanged(uint64)"(newPeriod?: null): PeriodChangedEventFilter;
    PeriodChanged(newPeriod?: null): PeriodChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "WithdrawTimeoutChanged(uint64)"(
      newWithdrawTimeout?: null
    ): WithdrawTimeoutChangedEventFilter;
    WithdrawTimeoutChanged(
      newWithdrawTimeout?: null
    ): WithdrawTimeoutChangedEventFilter;
  };

  estimateGas: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      leaf: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    azuroBet(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcomeId: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAzuroBet(
      newAzuroBet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeCore(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDaoReward(
      newDaoFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinDepo(
      newMinDepo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOracleReward(
      newOracleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeWithdrawTimeout(
      newWithdrawTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimDaoReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    daoFee(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getLeaf(overrides?: CallOverrides): Promise<BigNumber>;

    getLeavesAmount(
      node: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      l: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    getParent(
      fromNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockReserve(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    minDepo(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextNode(overrides?: CallOverrides): Promise<BigNumber>;

    nodeWithdrawView(
      leaf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reinforcementAbility(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendOracleReward(
      oracle: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDaoRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treeNode(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateId(overrides?: CallOverrides): Promise<BigNumber>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLiquidity(
      depNum: BigNumberish,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      leaf: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    azuroBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bet(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcomeId: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAzuroBet(
      newAzuroBet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeCore(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDaoReward(
      newDaoFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinDepo(
      newMinDepo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOracleReward(
      newOracleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeWithdrawTimeout(
      newWithdrawTimeout: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimDaoReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLeaf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLeavesAmount(
      node: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      l: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParent(
      fromNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockReserve(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodeWithdrawView(
      leaf: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reinforcementAbility(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendOracleReward(
      oracle: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDaoRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treeNode(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      depNum: BigNumberish,
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
