/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LPInterface extends utils.Interface {
  contractName: "LP";
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "addReserve(uint256,uint256)": FunctionFragment;
    "affiliates(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "azuroBet()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bet(uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "bettingLiquidity()": FunctionFragment;
    "changeCore(address)": FunctionFragment;
    "changePeriod(uint256)": FunctionFragment;
    "changeRewardOdds(uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "core()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getLiquidityRequests(address)": FunctionFragment;
    "getPeriodsDates()": FunctionFragment;
    "getPossibilityOfReinforcement(uint256)": FunctionFragment;
    "getPossibilityOfReinforcementFromCore()": FunctionFragment;
    "getReserve()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initStartDate()": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "liquidityRequest(uint256)": FunctionFragment;
    "lockReserve(uint256)": FunctionFragment;
    "lockedLiquidity()": FunctionFragment;
    "name()": FunctionFragment;
    "oddsDecimals()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(address)": FunctionFragment;
    "periodLen()": FunctionFragment;
    "phase2end()": FunctionFragment;
    "reinforcementAbility()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "rewardFeeOdds()": FunctionFragment;
    "savedPeriods()": FunctionFragment;
    "setAzuroBet(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalBetsAmount()": FunctionFragment;
    "totalReserve()": FunctionFragment;
    "totalRewards()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewPayout(uint256)": FunctionFragment;
    "withdrawLiquidity(uint256)": FunctionFragment;
    "withdrawPayout(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReserve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "affiliates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "azuroBet", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bet",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bettingLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "changeCore", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRewardOdds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityRequests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodsDates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPossibilityOfReinforcement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPossibilityOfReinforcementFromCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockReserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oddsDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "periodLen", values?: undefined): string;
  encodeFunctionData(functionFragment: "phase2end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reinforcementAbility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardFeeOdds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savedPeriods",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAzuroBet", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBetsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayout",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "affiliates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "azuroBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bettingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRewardOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodsDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPossibilityOfReinforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPossibilityOfReinforcementFromCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oddsDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "periodLen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phase2end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinforcementAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardFeeOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savedPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAzuroBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBetsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayout",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BetterWin(address,uint256,uint256)": EventFragment;
    "LiquidityAdded(address,uint256)": EventFragment;
    "LiquidityRemoved(address,uint256)": EventFragment;
    "LiquidityRequested(address,uint256)": EventFragment;
    "NewBet(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetterWin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BetterWinEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { better: string; tokenId: BigNumber; amount: BigNumber }
>;

export type BetterWinEventFilter = TypedEventFilter<BetterWinEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export type LiquidityRequestedEvent = TypedEvent<
  [string, BigNumber],
  { requestWallet: string; requestedValueLP: BigNumber }
>;

export type LiquidityRequestedEventFilter =
  TypedEventFilter<LiquidityRequestedEvent>;

export type NewBetEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    owner: string;
    betID: BigNumber;
    conditionId: BigNumber;
    outcomeId: BigNumber;
    amount: BigNumber;
    odds: BigNumber;
    fund1: BigNumber;
    fund2: BigNumber;
  }
>;

export type NewBetEventFilter = TypedEventFilter<NewBetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface LP extends BaseContract {
  contractName: "LP";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    affiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { claimed: BigNumber; amount: BigNumber }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    azuroBet(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bet(
      conditionID: BigNumberish,
      amount: BigNumberish,
      outcomeID: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      affiliate_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bettingLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeCore(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeRewardOdds(
      newOdds_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLiquidityRequests(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber]
      ] & {
        beginDates: [BigNumber, BigNumber, BigNumber];
        personal: [BigNumber, BigNumber, BigNumber];
        total: [BigNumber, BigNumber, BigNumber];
      }
    >;

    getPeriodsDates(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber, BigNumber]] & {
        beginDates: [BigNumber, BigNumber, BigNumber];
      }
    >;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    getPossibilityOfReinforcementFromCore(
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    getReserve(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reserve: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initStartDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      _periodLen: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityRequest(
      valueLP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockReserve(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oddsDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      affiliate_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    periodLen(overrides?: CallOverrides): Promise<[BigNumber]>;

    phase2end(overrides?: CallOverrides): Promise<[BigNumber]>;

    reinforcementAbility(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalValue: BigNumber }>;

    rewardFeeOdds(overrides?: CallOverrides): Promise<[BigNumber]>;

    savedPeriods(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAzuroBet(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalBetsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    withdrawLiquidity(
      amountLP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReserve(
    initReserve: BigNumberish,
    profitReserve: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  affiliates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { claimed: BigNumber; amount: BigNumber }
  >;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  azuroBet(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bet(
    conditionID: BigNumberish,
    amount: BigNumberish,
    outcomeID: BigNumberish,
    deadline: BigNumberish,
    minOdds: BigNumberish,
    affiliate_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bettingLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  changeCore(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeRewardOdds(
    newOdds_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLiquidityRequests(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber],
      [BigNumber, BigNumber, BigNumber]
    ] & {
      beginDates: [BigNumber, BigNumber, BigNumber];
      personal: [BigNumber, BigNumber, BigNumber];
      total: [BigNumber, BigNumber, BigNumber];
    }
  >;

  getPeriodsDates(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getPossibilityOfReinforcement(
    reinforcementAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPossibilityOfReinforcementFromCore(
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserve(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initStartDate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    token_: string,
    azuroBetAddress: string,
    _periodLen: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityRequest(
    valueLP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockReserve(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  oddsDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    affiliate_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  periodLen(overrides?: CallOverrides): Promise<BigNumber>;

  phase2end(overrides?: CallOverrides): Promise<BigNumber>;

  reinforcementAbility(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  rewardFeeOdds(overrides?: CallOverrides): Promise<BigNumber>;

  savedPeriods(overrides?: CallOverrides): Promise<BigNumber>;

  setAzuroBet(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalBetsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserve(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewPayout(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  withdrawLiquidity(
    amountLP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPayout(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    affiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { claimed: BigNumber; amount: BigNumber }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    azuroBet(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      conditionID: BigNumberish,
      amount: BigNumberish,
      outcomeID: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      affiliate_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bettingLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    changeCore(addr: string, overrides?: CallOverrides): Promise<void>;

    changePeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRewardOdds(
      newOdds_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLiquidityRequests(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber],
        [BigNumber, BigNumber, BigNumber]
      ] & {
        beginDates: [BigNumber, BigNumber, BigNumber];
        personal: [BigNumber, BigNumber, BigNumber];
        total: [BigNumber, BigNumber, BigNumber];
      }
    >;

    getPeriodsDates(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPossibilityOfReinforcementFromCore(
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      _periodLen: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityRequest(
      valueLP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockReserve(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    oddsDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      affiliate_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLen(overrides?: CallOverrides): Promise<BigNumber>;

    phase2end(overrides?: CallOverrides): Promise<BigNumber>;

    reinforcementAbility(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewardFeeOdds(overrides?: CallOverrides): Promise<BigNumber>;

    savedPeriods(overrides?: CallOverrides): Promise<BigNumber>;

    setAzuroBet(addr: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalBetsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserve(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    withdrawLiquidity(
      amountLP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BetterWin(address,uint256,uint256)"(
      better?: string | null,
      tokenId?: null,
      amount?: null
    ): BetterWinEventFilter;
    BetterWin(
      better?: string | null,
      tokenId?: null,
      amount?: null
    ): BetterWinEventFilter;

    "LiquidityAdded(address,uint256)"(
      account?: string | null,
      amount?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      account?: string | null,
      amount?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,uint256)"(
      account?: string | null,
      amount?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      account?: string | null,
      amount?: null
    ): LiquidityRemovedEventFilter;

    "LiquidityRequested(address,uint256)"(
      requestWallet?: string | null,
      requestedValueLP?: null
    ): LiquidityRequestedEventFilter;
    LiquidityRequested(
      requestWallet?: string | null,
      requestedValueLP?: null
    ): LiquidityRequestedEventFilter;

    "NewBet(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      owner?: string | null,
      betID?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      outcomeId?: null,
      amount?: null,
      odds?: null,
      fund1?: null,
      fund2?: null
    ): NewBetEventFilter;
    NewBet(
      owner?: string | null,
      betID?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      outcomeId?: null,
      amount?: null,
      odds?: null,
      fund1?: null,
      fund2?: null
    ): NewBetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    affiliates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    azuroBet(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      conditionID: BigNumberish,
      amount: BigNumberish,
      outcomeID: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      affiliate_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bettingLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    changeCore(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeRewardOdds(
      newOdds_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLiquidityRequests(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodsDates(overrides?: CallOverrides): Promise<BigNumber>;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPossibilityOfReinforcementFromCore(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      _periodLen: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityRequest(
      valueLP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockReserve(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oddsDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      affiliate_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodLen(overrides?: CallOverrides): Promise<BigNumber>;

    phase2end(overrides?: CallOverrides): Promise<BigNumber>;

    reinforcementAbility(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewardFeeOdds(overrides?: CallOverrides): Promise<BigNumber>;

    savedPeriods(overrides?: CallOverrides): Promise<BigNumber>;

    setAzuroBet(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalBetsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserve(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLiquidity(
      amountLP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReserve(
      initReserve: BigNumberish,
      profitReserve: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    affiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    azuroBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bet(
      conditionID: BigNumberish,
      amount: BigNumberish,
      outcomeID: BigNumberish,
      deadline: BigNumberish,
      minOdds: BigNumberish,
      affiliate_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bettingLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeCore(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeRewardOdds(
      newOdds_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLiquidityRequests(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodsDates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPossibilityOfReinforcement(
      reinforcementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPossibilityOfReinforcementFromCore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initStartDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      token_: string,
      azuroBetAddress: string,
      _periodLen: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityRequest(
      valueLP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockReserve(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oddsDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      affiliate_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phase2end(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinforcementAbility(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardFeeOdds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savedPeriods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAzuroBet(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBetsAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      amountLP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
