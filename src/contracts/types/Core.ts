/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ICore {
  export type ConditionStruct = {
    fundBank: [BigNumberish, BigNumberish];
    payouts: [BigNumberish, BigNumberish];
    totalNetBets: [BigNumberish, BigNumberish];
    reinforcement: BigNumberish;
    margin: BigNumberish;
    ipfsHash: BytesLike;
    outcomes: [BigNumberish, BigNumberish];
    scopeId: BigNumberish;
    outcomeWin: BigNumberish;
    timestamp: BigNumberish;
    state: BigNumberish;
    leaf: BigNumberish;
  };

  export type ConditionStructOutput = [
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    string,
    [BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    fundBank: [BigNumber, BigNumber];
    payouts: [BigNumber, BigNumber];
    totalNetBets: [BigNumber, BigNumber];
    reinforcement: BigNumber;
    margin: BigNumber;
    ipfsHash: string;
    outcomes: [BigNumber, BigNumber];
    scopeId: BigNumber;
    outcomeWin: BigNumber;
    timestamp: BigNumber;
    state: number;
    leaf: number;
  };
}

export interface CoreInterface extends utils.Interface {
  contractName: "Core";
  functions: {
    "LP()": FunctionFragment;
    "addMaintainer(address,bool)": FunctionFragment;
    "allConditionsStopped()": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "calculateOdds(uint256,uint128,uint64)": FunctionFragment;
    "cancelByMaintainer(uint256)": FunctionFragment;
    "cancelByOracle(uint256)": FunctionFragment;
    "ceil(uint256,uint256)": FunctionFragment;
    "changeMaxBanksRatio(uint64)": FunctionFragment;
    "conditions(uint256)": FunctionFragment;
    "createCondition(uint256,uint128,uint64[2],uint64[2],uint64,bytes32)": FunctionFragment;
    "defaultMargin()": FunctionFragment;
    "defaultReinforcement()": FunctionFragment;
    "getBetInfo(uint256)": FunctionFragment;
    "getCondition(uint256)": FunctionFragment;
    "getConditionFunds(uint256)": FunctionFragment;
    "getConditionReinforcement(uint256)": FunctionFragment;
    "getLockedPayout()": FunctionFragment;
    "getMargin(uint64)": FunctionFragment;
    "getOddsFromBanks(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getReinforcement(uint64)": FunctionFragment;
    "initialize(uint128,address,uint128)": FunctionFragment;
    "isOracle(address)": FunctionFragment;
    "isOutComeCorrect(uint256,uint256)": FunctionFragment;
    "lastConditionId()": FunctionFragment;
    "maintainers(address)": FunctionFragment;
    "marginAdjustedOdds(uint256,uint256,uint256)": FunctionFragment;
    "maxBanksRatio()": FunctionFragment;
    "multiplier()": FunctionFragment;
    "oracleConditionIds(address,uint256)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "putBet(uint256,uint256,uint128,uint64,uint64)": FunctionFragment;
    "renounceOracle(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveCondition(uint256,uint64)": FunctionFragment;
    "resolvePayout(uint256)": FunctionFragment;
    "setLp(address)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "shift(uint256,uint64)": FunctionFragment;
    "sqrt(uint256)": FunctionFragment;
    "stopAllConditions(bool)": FunctionFragment;
    "stopCondition(uint256,bool)": FunctionFragment;
    "totalLockedPayout()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMargins(uint128[])": FunctionFragment;
    "updateReinforcements(uint128[])": FunctionFragment;
    "viewPayout(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addMaintainer",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allConditionsStopped",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bets", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calculateOdds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelByMaintainer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelByOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ceil",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxBanksRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCondition",
    values: [
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultReinforcement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBetInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCondition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConditionFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConditionReinforcement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOddsFromBanks",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReinforcement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isOutComeCorrect",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastConditionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maintainers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marginAdjustedOdds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBanksRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleConditionIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracles", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "putBet",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveCondition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolvePayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setLp", values: [string]): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shift",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sqrt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stopAllConditions",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stopCondition",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMargins",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReinforcements",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPayout",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "LP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allConditionsStopped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelByMaintainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelByOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ceil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxBanksRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "conditions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultReinforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBetInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConditionFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConditionReinforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOddsFromBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReinforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOutComeCorrect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastConditionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintainers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginAdjustedOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBanksRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiplier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleConditionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "putBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolvePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sqrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopAllConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMargins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReinforcements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewPayout", data: BytesLike): Result;

  events: {
    "AllConditionsStopped(bool)": EventFragment;
    "ConditionCreated(uint256,uint256,uint64)": EventFragment;
    "ConditionResolved(uint256,uint256,uint64,uint8,uint256)": EventFragment;
    "ConditionShifted(uint256,uint64)": EventFragment;
    "ConditionStopped(uint256,bool)": EventFragment;
    "LpChanged(address)": EventFragment;
    "MaintainerUpdated(address,bool)": EventFragment;
    "MaxBanksRatioChanged(uint64)": EventFragment;
    "OracleAdded(address)": EventFragment;
    "OracleRenounced(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllConditionsStopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionShifted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConditionStopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LpChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaintainerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBanksRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AllConditionsStoppedEvent = TypedEvent<
  [boolean],
  { flag: boolean }
>;

export type AllConditionsStoppedEventFilter =
  TypedEventFilter<AllConditionsStoppedEvent>;

export type ConditionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { oracleConditionId: BigNumber; conditionId: BigNumber; timestamp: BigNumber }
>;

export type ConditionCreatedEventFilter =
  TypedEventFilter<ConditionCreatedEvent>;

export type ConditionResolvedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number, BigNumber],
  {
    oracleConditionId: BigNumber;
    conditionId: BigNumber;
    outcomeWin: BigNumber;
    state: number;
    amountForLp: BigNumber;
  }
>;

export type ConditionResolvedEventFilter =
  TypedEventFilter<ConditionResolvedEvent>;

export type ConditionShiftedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { conditionId: BigNumber; newTimestamp: BigNumber }
>;

export type ConditionShiftedEventFilter =
  TypedEventFilter<ConditionShiftedEvent>;

export type ConditionStoppedEvent = TypedEvent<
  [BigNumber, boolean],
  { conditionId: BigNumber; flag: boolean }
>;

export type ConditionStoppedEventFilter =
  TypedEventFilter<ConditionStoppedEvent>;

export type LpChangedEvent = TypedEvent<[string], { newLp: string }>;

export type LpChangedEventFilter = TypedEventFilter<LpChangedEvent>;

export type MaintainerUpdatedEvent = TypedEvent<
  [string, boolean],
  { maintainer: string; active: boolean }
>;

export type MaintainerUpdatedEventFilter =
  TypedEventFilter<MaintainerUpdatedEvent>;

export type MaxBanksRatioChangedEvent = TypedEvent<
  [BigNumber],
  { newRatio: BigNumber }
>;

export type MaxBanksRatioChangedEventFilter =
  TypedEventFilter<MaxBanksRatioChangedEvent>;

export type OracleAddedEvent = TypedEvent<[string], { newOracle: string }>;

export type OracleAddedEventFilter = TypedEventFilter<OracleAddedEvent>;

export type OracleRenouncedEvent = TypedEvent<[string], { oracle: string }>;

export type OracleRenouncedEventFilter = TypedEventFilter<OracleRenouncedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Core extends BaseContract {
  contractName: "Core";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LP(overrides?: CallOverrides): Promise<[string]>;

    addMaintainer(
      maintainer: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allConditionsStopped(overrides?: CallOverrides): Promise<[boolean]>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        conditionId: BigNumber;
        amount: BigNumber;
        outcome: BigNumber;
        createdAt: BigNumber;
        odds: BigNumber;
        payed: boolean;
      }
    >;

    calculateOdds(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { odds: BigNumber }>;

    cancelByMaintainer(
      conditionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelByOracle(
      oracleConditionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeMaxBanksRatio(
      newRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        reinforcement: BigNumber;
        margin: BigNumber;
        ipfsHash: string;
        scopeId: BigNumber;
        outcomeWin: BigNumber;
        timestamp: BigNumber;
        state: number;
        leaf: number;
      }
    >;

    createCondition(
      oracleCondId: BigNumberish,
      scopeId: BigNumberish,
      odds: [BigNumberish, BigNumberish],
      outcomes: [BigNumberish, BigNumberish],
      timestamp: BigNumberish,
      ipfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultReinforcement(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBetInfo(
      betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        odds: BigNumber;
        createdAt: BigNumber;
      }
    >;

    getCondition(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ICore.ConditionStructOutput]>;

    getConditionFunds(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]] & { fundBank: [BigNumber, BigNumber] }>;

    getConditionReinforcement(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reinforcement: BigNumber }>;

    getLockedPayout(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMargin(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOddsFromBanks(
      fund1Bank: BigNumberish,
      fund2Bank: BigNumberish,
      amount: BigNumberish,
      outcomeIndex: BigNumberish,
      margin: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReinforcement(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      reinforcement: BigNumberish,
      oracle: string,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOracle(oracle: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOutComeCorrect(
      conditionId: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { correct: boolean }>;

    lastConditionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    maintainers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    marginAdjustedOdds(
      odds: BigNumberish,
      marginality: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { newOdds: BigNumber }>;

    maxBanksRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleConditionIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    putBet(
      conditionId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      minOdds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveCondition(
      oracleCondId: BigNumberish,
      outcomeWin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolvePayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLp(
      lp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shift(
      conditionId: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { y: BigNumber }>;

    stopAllConditions(
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopCondition(
      conditionId: BigNumberish,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalLockedPayout(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMargins(
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReinforcements(
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { success: boolean; amount: BigNumber }>;
  };

  LP(overrides?: CallOverrides): Promise<string>;

  addMaintainer(
    maintainer: string,
    active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allConditionsStopped(overrides?: CallOverrides): Promise<boolean>;

  bets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      conditionId: BigNumber;
      amount: BigNumber;
      outcome: BigNumber;
      createdAt: BigNumber;
      odds: BigNumber;
      payed: boolean;
    }
  >;

  calculateOdds(
    conditionId: BigNumberish,
    amount: BigNumberish,
    outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelByMaintainer(
    conditionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelByOracle(
    oracleConditionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ceil(
    a: BigNumberish,
    m: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeMaxBanksRatio(
    newRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  conditions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      reinforcement: BigNumber;
      margin: BigNumber;
      ipfsHash: string;
      scopeId: BigNumber;
      outcomeWin: BigNumber;
      timestamp: BigNumber;
      state: number;
      leaf: number;
    }
  >;

  createCondition(
    oracleCondId: BigNumberish,
    scopeId: BigNumberish,
    odds: [BigNumberish, BigNumberish],
    outcomes: [BigNumberish, BigNumberish],
    timestamp: BigNumberish,
    ipfsHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultMargin(overrides?: CallOverrides): Promise<BigNumber>;

  defaultReinforcement(overrides?: CallOverrides): Promise<BigNumber>;

  getBetInfo(
    betId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      odds: BigNumber;
      createdAt: BigNumber;
    }
  >;

  getCondition(
    conditionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ICore.ConditionStructOutput>;

  getConditionFunds(
    conditionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getConditionReinforcement(
    conditionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockedPayout(overrides?: CallOverrides): Promise<BigNumber>;

  getMargin(
    outcomeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOddsFromBanks(
    fund1Bank: BigNumberish,
    fund2Bank: BigNumberish,
    amount: BigNumberish,
    outcomeIndex: BigNumberish,
    margin: BigNumberish,
    multiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReinforcement(
    outcomeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    reinforcement: BigNumberish,
    oracle: string,
    margin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOracle(oracle: string, overrides?: CallOverrides): Promise<boolean>;

  isOutComeCorrect(
    conditionId: BigNumberish,
    outcome: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastConditionId(overrides?: CallOverrides): Promise<BigNumber>;

  maintainers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  marginAdjustedOdds(
    odds: BigNumberish,
    marginality: BigNumberish,
    multiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxBanksRatio(overrides?: CallOverrides): Promise<BigNumber>;

  multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  oracleConditionIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracles(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  putBet(
    conditionId: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    outcome: BigNumberish,
    minOdds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOracle(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveCondition(
    oracleCondId: BigNumberish,
    outcomeWin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolvePayout(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLp(
    lp: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shift(
    conditionId: BigNumberish,
    newTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  stopAllConditions(
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopCondition(
    conditionId: BigNumberish,
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalLockedPayout(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMargins(
    data: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReinforcements(
    data: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewPayout(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { success: boolean; amount: BigNumber }>;

  callStatic: {
    LP(overrides?: CallOverrides): Promise<string>;

    addMaintainer(
      maintainer: string,
      active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allConditionsStopped(overrides?: CallOverrides): Promise<boolean>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        conditionId: BigNumber;
        amount: BigNumber;
        outcome: BigNumber;
        createdAt: BigNumber;
        odds: BigNumber;
        payed: boolean;
      }
    >;

    calculateOdds(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelByMaintainer(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelByOracle(
      oracleConditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMaxBanksRatio(
      newRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        reinforcement: BigNumber;
        margin: BigNumber;
        ipfsHash: string;
        scopeId: BigNumber;
        outcomeWin: BigNumber;
        timestamp: BigNumber;
        state: number;
        leaf: number;
      }
    >;

    createCondition(
      oracleCondId: BigNumberish,
      scopeId: BigNumberish,
      odds: [BigNumberish, BigNumberish],
      outcomes: [BigNumberish, BigNumberish],
      timestamp: BigNumberish,
      ipfsHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultMargin(overrides?: CallOverrides): Promise<BigNumber>;

    defaultReinforcement(overrides?: CallOverrides): Promise<BigNumber>;

    getBetInfo(
      betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        odds: BigNumber;
        createdAt: BigNumber;
      }
    >;

    getCondition(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ICore.ConditionStructOutput>;

    getConditionFunds(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getConditionReinforcement(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedPayout(overrides?: CallOverrides): Promise<BigNumber>;

    getMargin(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOddsFromBanks(
      fund1Bank: BigNumberish,
      fund2Bank: BigNumberish,
      amount: BigNumberish,
      outcomeIndex: BigNumberish,
      margin: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReinforcement(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      reinforcement: BigNumberish,
      oracle: string,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isOracle(oracle: string, overrides?: CallOverrides): Promise<boolean>;

    isOutComeCorrect(
      conditionId: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    maintainers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    marginAdjustedOdds(
      odds: BigNumberish,
      marginality: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBanksRatio(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    oracleConditionIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    putBet(
      conditionId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      minOdds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    renounceOracle(oracle: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveCondition(
      oracleCondId: BigNumberish,
      outcomeWin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolvePayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { success: boolean; amount: BigNumber }>;

    setLp(lp: string, overrides?: CallOverrides): Promise<void>;

    setOracle(oracle: string, overrides?: CallOverrides): Promise<void>;

    shift(
      conditionId: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stopAllConditions(flag: boolean, overrides?: CallOverrides): Promise<void>;

    stopCondition(
      conditionId: BigNumberish,
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalLockedPayout(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMargins(
      data: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateReinforcements(
      data: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { success: boolean; amount: BigNumber }>;
  };

  filters: {
    "AllConditionsStopped(bool)"(flag?: null): AllConditionsStoppedEventFilter;
    AllConditionsStopped(flag?: null): AllConditionsStoppedEventFilter;

    "ConditionCreated(uint256,uint256,uint64)"(
      oracleConditionId?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      timestamp?: null
    ): ConditionCreatedEventFilter;
    ConditionCreated(
      oracleConditionId?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      timestamp?: null
    ): ConditionCreatedEventFilter;

    "ConditionResolved(uint256,uint256,uint64,uint8,uint256)"(
      oracleConditionId?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      outcomeWin?: null,
      state?: null,
      amountForLp?: null
    ): ConditionResolvedEventFilter;
    ConditionResolved(
      oracleConditionId?: BigNumberish | null,
      conditionId?: BigNumberish | null,
      outcomeWin?: null,
      state?: null,
      amountForLp?: null
    ): ConditionResolvedEventFilter;

    "ConditionShifted(uint256,uint64)"(
      conditionId?: null,
      newTimestamp?: null
    ): ConditionShiftedEventFilter;
    ConditionShifted(
      conditionId?: null,
      newTimestamp?: null
    ): ConditionShiftedEventFilter;

    "ConditionStopped(uint256,bool)"(
      conditionId?: BigNumberish | null,
      flag?: null
    ): ConditionStoppedEventFilter;
    ConditionStopped(
      conditionId?: BigNumberish | null,
      flag?: null
    ): ConditionStoppedEventFilter;

    "LpChanged(address)"(newLp?: string | null): LpChangedEventFilter;
    LpChanged(newLp?: string | null): LpChangedEventFilter;

    "MaintainerUpdated(address,bool)"(
      maintainer?: string | null,
      active?: null
    ): MaintainerUpdatedEventFilter;
    MaintainerUpdated(
      maintainer?: string | null,
      active?: null
    ): MaintainerUpdatedEventFilter;

    "MaxBanksRatioChanged(uint64)"(
      newRatio?: null
    ): MaxBanksRatioChangedEventFilter;
    MaxBanksRatioChanged(newRatio?: null): MaxBanksRatioChangedEventFilter;

    "OracleAdded(address)"(newOracle?: string | null): OracleAddedEventFilter;
    OracleAdded(newOracle?: string | null): OracleAddedEventFilter;

    "OracleRenounced(address)"(
      oracle?: string | null
    ): OracleRenouncedEventFilter;
    OracleRenounced(oracle?: string | null): OracleRenouncedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    LP(overrides?: CallOverrides): Promise<BigNumber>;

    addMaintainer(
      maintainer: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allConditionsStopped(overrides?: CallOverrides): Promise<BigNumber>;

    bets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateOdds(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelByMaintainer(
      conditionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelByOracle(
      oracleConditionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMaxBanksRatio(
      newRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCondition(
      oracleCondId: BigNumberish,
      scopeId: BigNumberish,
      odds: [BigNumberish, BigNumberish],
      outcomes: [BigNumberish, BigNumberish],
      timestamp: BigNumberish,
      ipfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultMargin(overrides?: CallOverrides): Promise<BigNumber>;

    defaultReinforcement(overrides?: CallOverrides): Promise<BigNumber>;

    getBetInfo(
      betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCondition(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConditionFunds(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConditionReinforcement(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedPayout(overrides?: CallOverrides): Promise<BigNumber>;

    getMargin(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOddsFromBanks(
      fund1Bank: BigNumberish,
      fund2Bank: BigNumberish,
      amount: BigNumberish,
      outcomeIndex: BigNumberish,
      margin: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReinforcement(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      reinforcement: BigNumberish,
      oracle: string,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOracle(oracle: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOutComeCorrect(
      conditionId: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastConditionId(overrides?: CallOverrides): Promise<BigNumber>;

    maintainers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    marginAdjustedOdds(
      odds: BigNumberish,
      marginality: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBanksRatio(overrides?: CallOverrides): Promise<BigNumber>;

    multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    oracleConditionIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    putBet(
      conditionId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      minOdds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveCondition(
      oracleCondId: BigNumberish,
      outcomeWin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolvePayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLp(
      lp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shift(
      conditionId: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stopAllConditions(
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopCondition(
      conditionId: BigNumberish,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalLockedPayout(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMargins(
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReinforcements(
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMaintainer(
      maintainer: string,
      active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allConditionsStopped(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateOdds(
      conditionId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelByMaintainer(
      conditionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelByOracle(
      oracleConditionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeMaxBanksRatio(
      newRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCondition(
      oracleCondId: BigNumberish,
      scopeId: BigNumberish,
      odds: [BigNumberish, BigNumberish],
      outcomes: [BigNumberish, BigNumberish],
      timestamp: BigNumberish,
      ipfsHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultReinforcement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBetInfo(
      betId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCondition(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConditionFunds(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConditionReinforcement(
      conditionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMargin(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOddsFromBanks(
      fund1Bank: BigNumberish,
      fund2Bank: BigNumberish,
      amount: BigNumberish,
      outcomeIndex: BigNumberish,
      margin: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReinforcement(
      outcomeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      reinforcement: BigNumberish,
      oracle: string,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOracle(
      oracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOutComeCorrect(
      conditionId: BigNumberish,
      outcome: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastConditionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maintainers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marginAdjustedOdds(
      odds: BigNumberish,
      marginality: BigNumberish,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBanksRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleConditionIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    putBet(
      conditionId: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      outcome: BigNumberish,
      minOdds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveCondition(
      oracleCondId: BigNumberish,
      outcomeWin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolvePayout(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLp(
      lp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shift(
      conditionId: BigNumberish,
      newTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopAllConditions(
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopCondition(
      conditionId: BigNumberish,
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalLockedPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMargins(
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReinforcements(
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewPayout(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
